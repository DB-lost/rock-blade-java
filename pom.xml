<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.1</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.rockblade</groupId>
	<artifactId>rock-blade-java</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>
	<name>rock-blade-java</name>
	<description>Rock Blade Java - A Modular Spring Boot Template Project</description>
	<url />
	<licenses>
		<license />
	</licenses>
	<developers>
		<developer />
	</developers>
	<scm>
		<connection />
		<developerConnection />
		<tag />
		<url />
	</scm>
	<properties>
		<java.version>21</java.version>
		<cucumber.version>7.20.1</cucumber.version>
		<jacoco.version>0.8.12</jacoco.version>
		<spotless.version>2.44.1</spotless.version>
		<googleJavaFormat.version>1.25.2</googleJavaFormat.version>
		<sortpom.version>4.0.0</sortpom.version>
		<testcontainers.version>1.19.7</testcontainers.version>
		<assertj.version>3.25.3</assertj.version>
		<wiremock.version>3.4.2</wiremock.version>
		<rest-assured.version>5.4.0</rest-assured.version>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>
		<sonar.coverage.exclusions>
			**/RockBladeJavaApplication.java
		</sonar.coverage.exclusions>
		<mybatis-flex.version>1.10.5</mybatis-flex.version>
		<sa-token.version>1.39.0</sa-token.version>
		<hutool.version>5.8.34</hutool.version>
		<postgresql.version>42.6.0</postgresql.version>
		<knife4j.version>4.6.0</knife4j.version>
		<dotenv.version>5.2.2</dotenv.version>
	</properties>

	<!-- 子模块定义 -->
	<modules>
		<module>rock-blade-core</module>
		<module>rock-blade-framework</module>
		<module>rock-blade-infrastructure</module>
		<module>rock-blade-api</module>
		<module>rock-blade-web</module>
	</modules>
	<dependencyManagement>
		<dependencies>
			<!-- 子模块依赖 -->
			<dependency>
				<groupId>com.rockblade</groupId>
				<artifactId>rock-blade-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.rockblade</groupId>
				<artifactId>rock-blade-framework</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.rockblade</groupId>
				<artifactId>rock-blade-infrastructure</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.rockblade</groupId>
				<artifactId>rock-blade-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.rockblade</groupId>
				<artifactId>rock-blade-web</artifactId>
				<version>${project.version}</version>
			</dependency>

			<!-- MyBatis Flex -->
			<dependency>
				<groupId>com.mybatis-flex</groupId>
				<artifactId>mybatis-flex-spring-boot3-starter</artifactId>
				<version>${mybatis-flex.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mybatis-flex</groupId>
				<artifactId>mybatis-flex-processor</artifactId>
				<version>${mybatis-flex.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- 代码生成器 -->
			<dependency>
				<groupId>com.mybatis-flex</groupId>
				<artifactId>mybatis-flex-codegen</artifactId>
				<version>${mybatis-flex.version}</version>
			</dependency>

			<!--  Sa-Token 权限认证，在线文档：https://sa-token.cc  -->
			<dependency>
				<groupId>cn.dev33</groupId>
				<artifactId>sa-token-spring-boot3-starter</artifactId>
				<version>${sa-token.version}</version>
			</dependency>
			<!-- Sa-Token 整合 Redis （使用 jackson 序列化方式） -->
			<dependency>
				<groupId>cn.dev33</groupId>
				<artifactId>sa-token-redis-jackson</artifactId>
				<version>${sa-token.version}</version>
			</dependency>
			<!--  Sa-Token 整合 jwt  -->
			<dependency>
				<groupId>cn.dev33</groupId>
				<artifactId>sa-token-jwt</artifactId>
				<version>${sa-token.version}</version>
			</dependency>
			<!--  Sa-Token 整合 SpringAOP 实现注解鉴权  -->
			<dependency>
				<groupId>cn.dev33</groupId>
				<artifactId>sa-token-spring-aop</artifactId>
				<version>${sa-token.version}</version>
			</dependency>

			<!-- hutool工具包 -->
			<dependency>
				<groupId>cn.hutool</groupId>
				<artifactId>hutool-all</artifactId>
				<version>${hutool.version}</version>
			</dependency>

			<!-- 读取环境变量 -->
			<dependency>
				<groupId>io.github.cdimascio</groupId>
				<artifactId>java-dotenv</artifactId>
				<version>${dotenv.version}</version>
			</dependency>

			<!-- knife4j-Swagger -->
			<dependency>
				<groupId>com.github.xingfudeshi</groupId>
				<artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
				<version>${knife4j.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- 公共依赖，所有子模块都会继承 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- 提供Redis连接池 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>

		<!-- 提供HikariCP连接池 -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
		</dependency>

		<!-- PgSQL -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version>
		</dependency>

		<!-- 开发工具 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Mail -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>

		<!-- Spring Boot Actuator -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Micrometer Core -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
		</dependency>

		<!-- Micrometer Prometheus registry -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>com.mybatis-flex</groupId>
							<artifactId>mybatis-flex-processor</artifactId>
							<version>${mybatis-flex.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
						<path>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-configuration-processor</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.diffplug.spotless</groupId>
				<artifactId>spotless-maven-plugin</artifactId>
				<version>${spotless.version}</version>
				<configuration>
					<formats>
						<!-- 配置基础文件格式 -->
						<format>
							<includes>
								<include>*.md</include>
								<include>.gitignore</include>
							</includes>
							<trimTrailingWhitespace />
							<endWithNewline />
							<indent>
								<spaces>true</spaces>
								<spacesPerTab>4</spacesPerTab>
							</indent>
						</format>
					</formats>
					<!-- Java代码格式化配置 -->
					<java>
						<googleJavaFormat>
							<version>${googleJavaFormat.version}</version>
							<style>GOOGLE</style>
							<reflowLongStrings>true</reflowLongStrings>
						</googleJavaFormat>
						<removeUnusedImports />
						<importOrder>
							<order>java,javax,org,com</order>
						</importOrder>
					</java>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>apply</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 添加Save Actions插件配置 -->
			<!-- 这个插件的作用是对POM文件进行排序 -->
			<plugin>
				<groupId>com.github.ekryd.sortpom</groupId>
				<artifactId>sortpom-maven-plugin</artifactId>
				<version>${sortpom.version}</version>
				<configuration>
					<sortProperties>true</sortProperties>
					<keepBlankLines>true</keepBlankLines>
					<sortDependencies>scope,groupId,artifactId</sortDependencies>
					<createBackupFile>false</createBackupFile>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- 本地开发环境使用阿里云镜像加速 -->
	<profiles>
		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<repositories>
				<repository>
					<id>aliyun</id>
					<url>https://maven.aliyun.com/repository/public</url>
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</repository>
			</repositories>
		</profile>
	</profiles>

</project>